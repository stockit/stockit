<?xml version='1.0' encoding='UTF-8'?>
<cacheEntry><query>rO0ABXNyACZvcmcuYXBhY2hlLnNvbHIuY2xpZW50LnNvbHJqLlNvbHJRdWVyefuCsjxJvfWvAgABTAALc29ydENsYXVzZXN0ABBMamF2YS91dGlsL0xpc3Q7eHIAMm9yZy5hcGFjaGUuc29sci5jb21tb24ucGFyYW1zLk1vZGlmaWFibGVTb2xyUGFyYW1zpzUAMz0+n8ECAAFMAAR2YWxzdAAPTGphdmEvdXRpbC9NYXA7eHIAKG9yZy5hcGFjaGUuc29sci5jb21tb24ucGFyYW1zLlNvbHJQYXJhbXMbXrzOZIuMNQIAAHhwc3IAF2phdmEudXRpbC5MaW5rZWRIYXNoTWFwNMBOXBBswPsCAAFaAAthY2Nlc3NPcmRlcnhyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAAFdAABcXVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0BjZUaGUgTG9zIEFuZ2VsZXMgc2Nob29scyBzdXBlcmludGVuZGVudCBoYXMgc3VzcGVuZGVkIGEgY29udHJhY3Qgd2l0aCBBcHBsZSBJbmMgdG8gcHJvdmlkZSBhbiBpUGFkIHRvIGVhY2ggb2YgaXRzIHN0dWRlbnRzIGFzIHRoZSAxIGJpbGxpb24gaW5pdGlhdGl2ZSBmYWNlcyBwcm9ibGVtcyBhbmQgZ3Jvd2luZyBzY3J1dGlueSB0aGUgTG9zIEFuZ2VsZXMgVGltZXMgcmVwb3J0ZWQgTW9uZGF5cyBzdXNwZW5zaW9uIGlzIHRoZSBsYXRlc3Qgc2V0YmFjayBmb3IgdGhlIExvcyBBbmdlbGVzIFVuaWZpZWQgU2Nob29sIERpc3RyaWN0cyBwcm9wb3NlZCB0ZWNobm9sb2d5IHJvbGxvdXQgdGhlIGxhcmdlc3Qgb2YgaXRzIGtpbmQgZm9yIGFueSBVUyBwdWJsaWMgZWR1Y2F0aW9uIHN5c3RlbSBVbmRlciBhIGNvbnRyYWN0IGFwcHJvdmVkIGEgbGl0dGxlIG1vcmUgdGhhbiBhIHllYXIgYWdvIEFwcGxlcyB0YWJsZXQgY29tcHV0ZXIgd2FzIHRvIGJlIGNvdXBsZWQgd2l0aCBhIGRpZ2l0YWwgY3VycmljdWx1bSBmcm9tIFBlYXJzb24gVGhlIHByb2dyYW0gd2FzIHRvIGV4cGFuZCBncmVhdGx5IG92ZXIgdGhlIG5leHQgeWVhciBNb3ZpbmcgZm9yd2FyZCB3ZSB3aWxsIG5vIGxvbmdlciB1dGlsaXplIG91ciBjdXJyZW50IGNvbnRyYWN0IHdpdGggQXBwbGUgSW5jIFN1cGVyaW50ZW5kZW50IEpvaG4gRGVhc3kgdG9sZCB0aGUgZGlzdHJpY3RzIEJvYXJkIG9mIEVkdWNhdGlvbiBvbiBNb25kYXkgaW4gYSBtZW1vIHBvc3RlZCBvbiB0aGUgbmV3c3BhcGVycyB3ZWJzaXRlIE5vdCBvbmx5IHdpbGwgdGhpcyBkZWNpc2lvbiBlbmFibGUgdXMgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgYW4gZXZlcmNoYW5naW5nIG1hcmtldHBsYWNlIGFuZCB0ZWNobm9sb2d5IGFkdmFuY2VzIGl0IHdpbGwgYWxzbyBnaXZlIHVzIHRpbWUgdG8gdGFrZSBpbnRvIGFjY291bnQgY29uY2VybnMgcmFpc2VkIERlYXN5IHdyb3RlIERlYXN5IGhhcyBkZXNjcmliZWQgdGhlIHJvbGxvdXQgYXMgYSBjaXZpbCByaWdodHMgaW5pdGlhdGl2ZSBkZXNpZ25lZCB0byBnaXZlIHN0dWRlbnRzIG1vc3RseSBmcm9tIGxvd2luY29tZSBmYW1pbGllcyBhY2Nlc3MgdG8gYSAyMXN0Y2VudHVyeSB0b29sIGNvbW1vbiBpbiBtaWRkbGVjbGFzcyBob3VzZWhvbGRzIFRoZSBsYW5kbWFyayBwcm9qZWN0IHJhbiBpbnRvIHByb2JsZW1zIGF0IHRoZSBzdGFydCBvZiB0aGUgMjAxMzIwMTQgc2Nob29sIHllYXIgd2hlbiBhYm91dCAzMDAgaGlnaCBzY2hvb2wgc3R1ZGVudHMgYW1vbmcgYW4gaW5pdGlhbCAyNTAwMCBwdXBpbHMgdG8gZ2V0IGFuIGlQYWQgYnlwYXNzZWQgaXRzIHNlY3VyaXR5IHByb3RvY29scyB0byBhY2Nlc3Mgc29jaWFsIG5ldHdvcmtpbmcgYW5kIG90aGVyIHdlYnNpdGVzIGJsb2NrZWQgdG8gdGhlbSBMYXN0IHdlZWsgYSBkcmFmdCByZXBvcnQgb2YgdGhlIGRpc3RyaWN0cyB0ZWNobm9sb2d5IGNvbW1pdHRlZSBvYnRhaW5lZCBieSB0aGUgbmV3c3BhcGVyIHdhcyBjcml0aWNhbCBvZiB0aGUgYmlkZGluZyBwcm9jZXNzIFRoZSBkaXN0cmljdCBhbmQgQXBwbGUgZGlkIG5vdCBpbW1lZGlhdGVseSBhbnN3ZXIgcmVxdWVzdHMgZm9yIGNvbW1lbnR0AARyb3dzdXEAfgAKAAAAAXQAATV0AAVzdGFydHVxAH4ACgAAAAF0AAEwdAACZmx1cQB+AAoAAAABdABvYXJ0aWNsZUlkLHRpdGxlLGNvbnRlbnQsZGF0ZSxzdG9ja0hpc3RvcnlJZCxzeW1ib2wsaGlzdG9yeURhdGUsb3BlbixoaWdoLGxvdyxjbG9zZSxhZGpDbG9zZSx2b2x1bWUsaWQsX3ZlcnNpb25fdAACZnF1cQB+AAoAAAABdAA6aGlzdG9yeURhdGU6WzIwMTMtMTItMDNUMDA6MDA6MDBaIFRPIDIwMTQtMDctMTBUNTk6NTk6NTlaXXgAcA==</query><documents><document><field name="articleId" class="java.lang.String">rO0ABXQABDM5NzY=</field><field name="title" class="java.lang.String">rO0ABXQAPldhc2hpbmd0b24sIFJlZ3VsYXRvcnMgU2hydWcgYXQgQWxpYmFiYSdzIFBsYW4gZm9yIE1hc3NpdmUgSVBP</field><field name="content" class="java.lang.String"></field><field name="date" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUcepHSAeA==</field><field name="stockHistoryId" class="java.lang.String">rO0ABXQAEDA3MjRkOGEzODdhYzY5Y2Y=</field><field name="symbol" class="java.lang.String">rO0ABXQABFBFUlk=</field><field name="historyDate" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUcjytCAeA==</field><field name="open" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEAxKPXCj1wp</field><field name="high" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEAxUeuFHrhS</field><field name="low" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEAxD1wo9cKP</field><field name="close" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEAxTMzMzMzN</field><field name="adjClose" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEAxTMzMzMzN</field><field name="volume" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAF6hA==</field><field name="id" class="java.lang.String">rO0ABXQAEGVlMDVmOTQ5N2ViNWY4OWU=</field><field name="_version_" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAUz4mE6aAAAA==</field></document><document><field name="articleId" class="java.lang.String">rO0ABXQABDU2NzU=</field><field name="title" class="java.lang.String">rO0ABXQAL0F1dGhvciBNaWNoYWVsIExld2lzOiBVUyBTdG9jayBNYXJrZXQgSXMgUmlnZ2Vk</field><field name="content" class="java.lang.String"></field><field name="date" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUURW8yAeA==</field><field name="stockHistoryId" class="java.lang.String">rO0ABXQAEDE3OWM0OWVkNzM5NWQ1ODM=</field><field name="symbol" class="java.lang.String">rO0ABXQABFNDSFc=</field><field name="historyDate" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUUWgiiAeA==</field><field name="open" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7bhR64Ueu</field><field name="high" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7fXCj1wo9</field><field name="low" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7JmZmZmZm</field><field name="close" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7VHrhR64U</field><field name="adjClose" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7Fwo9cKPX</field><field name="volume" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAG2w3A==</field><field name="id" class="java.lang.String">rO0ABXQAEDFjMzJjZmY3NTJmMTdlZDg=</field><field name="_version_" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAUz4mFqNAAAA==</field></document><document><field name="articleId" class="java.lang.String">rO0ABXQABDU2Njc=</field><field name="title" class="java.lang.String">rO0ABXQAP1N0b2NrIFRyYWRlciBTcGVlZCBDcmF6ZSBUaHJlYXRlbnMgU3RhYmlsaXR5LCBTY2huZWlkZXJtYW4gU2F5cw==</field><field name="content" class="java.lang.String"></field><field name="date" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUUWgiiAeA==</field><field name="stockHistoryId" class="java.lang.String">rO0ABXQAEGM2NjJiNmY3NTE3MmI1MmM=</field><field name="symbol" class="java.lang.String">rO0ABXQABFNDSFc=</field><field name="historyDate" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUUbqISAeA==</field><field name="open" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7a4UeuFHs</field><field name="high" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7uFHrhR64</field><field name="low" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7aPXCj1wp</field><field name="close" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7czMzMzMz</field><field name="adjClose" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEA7NcKPXCj2</field><field name="volume" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAIxI5A==</field><field name="id" class="java.lang.String">rO0ABXQAEDMzZTcyMzhlNGVmZDUyMGI=</field><field name="_version_" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAUz4mEXtAAAA==</field></document><document><field name="articleId" class="java.lang.String">rO0ABXQABTIzMTAz</field><field name="title" class="java.lang.String">rO0ABXQAOUFtZXJpY2FuIEFwcGFyZWwgSW52ZXN0b3IgTm90IFBsYW5uaW5nIHRvIFN1cHBvcnQgQ2hhcm5leQ==</field><field name="content" class="java.lang.String"></field><field name="date" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUbHGFiAeA==</field><field name="stockHistoryId" class="java.lang.String">rO0ABXQAEDAyMzgzNTUzNzYyNTRjZGQ=</field><field name="symbol" class="java.lang.String">rO0ABXQABFJPVEg=</field><field name="historyDate" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUbMPrSAeA==</field><field name="open" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cD+EeuFHrhR7</field><field name="high" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cD+EeuFHrhR7</field><field name="low" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cD+EeuFHrhR7</field><field name="close" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cD+EeuFHrhR7</field><field name="adjClose" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cD+EeuFHrhR7</field><field name="volume" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAHUwA==</field><field name="id" class="java.lang.String">rO0ABXQAEGNhN2ZiMmEzNjdjMjVhMDU=</field><field name="_version_" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAUz4mKv9AAAA==</field></document><document><field name="articleId" class="java.lang.String">rO0ABXQABTE0NjA3</field><field name="title" class="java.lang.String">rO0ABXQAN0FtYXpvbiB0byBEZWJ1dCBUVi1WaWV3aW5nIERldmljZSB0byBSZWFjaCBMaXZpbmcgUm9vbXM=</field><field name="content" class="java.lang.String">rO0ABXQK9EFtYXpvbi5jb20gSW5jLiBDaGllZiBFeGVjdXRpdmUgT2ZmaWNlciBKZWZmIEJlem9zIGlzIHN0ZXBwaW5nIHVwIHRoZSB0ZWNobm9sb2d5IGluZHVzdHJ54oCZcyBwdXNoIHRvIHJlYWNoIGN1c3RvbWVycyBpbiB0aGVpciBsaXZpbmcgcm9vbXMuIFRoZSB3b3JsZOKAmXMgbGFyZ2VzdCBJbnRlcm5ldCByZXRhaWxlciBpcyBzZXQgdG8gdW52ZWlsIGEgdGVsZXZpc2lvbi12aWV3aW5nIGRldmljZSBmb3Igc3RyZWFtaW5nIG1vdmllcywgdGVsZXZpc2lvbiBzaG93cyBhbmQgb3RoZXIgdmlkZW8gZnJvbSB0aGUgV2ViIGF0IGFuIGV2ZW50IGluIE5ldyBZb3JrLCBzYWlkIHBlb3BsZSB3aXRoIGtub3dsZWRnZSBvZiB0aGUgcGxhbnMsIHdobyBhc2tlZCBub3QgdG8gYmUgaWRlbnRpZmllZCBiZWNhdXNlIHRoZSBpbmZvcm1hdGlvbiBpcyBwcml2YXRlLiBUaGUgZGV2aWNlIHdpbGwgcHV0IEFtYXpvbiBpbiBjbG9zZXIgY29tcGV0aXRpb24gd2l0aCBBcHBsZSBJbmMuIGFuZCBHb29nbGUgSW5jLiwgd2hpY2ggb2ZmZXIgdGhlaXIgb3duIEludGVybmV0LWNvbm5lY3RlZCBnYWRnZXRzIGZvciBzdHJlYW1pbmcgdmlkZW8gdG8gYSBUVi4gVGhlIG1vdmUgd2lsbCBhbHNvIGVzY2FsYXRlIHRoZSBjb21wYW554oCZcyByaXZhbHJ5IHdpdGggTmV0ZmxpeCBJbmMuIGluIHZpZGVvLXN0cmVhbWluZyBzZXJ2aWNlcy4gQWxsIG9mIHRoZSBjb21wYW5pZXMgYXJlIHN0cml2aW5nIHRvIHJlYWNoIGludG8gY29uc3VtZXJz4oCZIGxpdmluZyByb29tcyBhbmQgdG8gdGllIGN1c3RvbWVycyB0byBhIHBhcnRpY3VsYXIgZWNvc3lzdGVtIG9mIHNlcnZpY2VzLiBLaW5sZXkgUGVhcnNhbGwsIGEgc3Bva2Vzd29tYW4gZm9yIFNlYXR0bGUtYmFzZWQgQW1hem9uLCBkaWRu4oCZdCByZXR1cm4gY2FsbHMgc2Vla2luZyBjb21tZW50LiBCbG9vbWJlcmcgTmV3cyByZXBvcnRlZCBsYXN0IHllYXIgdGhhdCBBbWF6b24gd2FzIHBsYW5uaW5nIHRvIHJlbGVhc2UgYSB0ZWxldmlzaW9uIHNldC10b3AgYm94LiBBbWF6b24gaGFzIGJlZW4gdXNpbmcgZnJlZSB2aWRlbyBzdHJlYW1pbmcgYXMgd2F5IHRvIGx1cmUgbW9yZSBwZW9wbGUgdG8gaXRzIHR3by1kYXkgc2hpcHBpbmcgc3Vic2NyaXB0aW9uLCBjYWxsZWQgUHJpbWUuIFByaW1lIG1lbWJlcnMgYXJlIHR5cGljYWxseSBhbW9uZyB0aGUgY29tcGFueeKAmXMgbW9zdCBhY3RpdmUgb25saW5lIHNob3BwZXJzLCBzYWlkIE1pY2hhZWwgUGFjaHRlciwgYW4gYW5hbHlzdCBhdCBXZWRidXNoIFNlY3VyaXRpZXMgSW5jLiBpbiBMb3MgQW5nZWxlcy4g4oCcVGhpcyBpcyBhYm91dCBzZWxsaW5nIFByaW1lLOKAnSBzYWlkIFBhY2h0ZXIsIHdobyBoYXMgdGhlIGVxdWl2YWxlbnQgb2YgYSBob2xkIHJhdGluZyBvbiB0aGUgc3RvY2suIOKAnEl0IHJlYWxseSBkb2VzIG9wZW4gdXAgdGhlaXIgYWJpbGl0eSB0byBkZWxpdmVyIGEgbG90IG9mIHN0dWZmLuKAnSBXaXRoIGl0cyBvd24gYm94LCBBbWF6b24gY2FuIGZlYXR1cmUgaXRzIGxpYnJhcnkgb2YgdmlkZW8gaW5zdGVhZCBvZiBkZXBlbmRpbmcgb24gb3RoZXIgVFYgbWFudWZhY3R1cmVycy4gTGlrZSBOZXRmbGl4LCB3aGljaCBwcm9kdWNlcyBzaG93cyBzdWNoIGFzIOKAnEhvdXNlIG9mIENhcmRzLOKAnSBBbWF6b24gaGFzIGJlZW4gZGV2ZWxvcGluZyBwcm9ncmFtbWluZyB0byBhdHRyYWN0IGN1c3RvbWVycyB3aXRoIGV4Y2x1c2l2ZSBjb250ZW50LiDigJxOb2JvZHkgZWxzZSBoYXMgYSBjcml0aWNhbCBtYXNzIG9mIGNvbnRlbnQgb3V0c2lkZSBvZiBOZXRmbGl4LOKAnSBzYWlkIFBhY2h0ZXIuIEJlem9zIGlzIHB1c2hpbmcgQW1hem9uIGZ1cnRoZXIgaW50byB0aGUgbWFudWZhY3R1cmluZyBvZiBoYXJkd2FyZSwgaW5jbHVkaW5nIHRhYmxldCBjb21wdXRlcnMsIGUtcmVhZGVycyBhbmQgcGFja2FnZS1kZWxpdmVyaW5nIGRyb25lcy4gQSBUViBkZXZpY2UgcHJvdmlkZXMgYSBuZXcgcGxhdGZvcm0gZm9yIHNvZnR3YXJlIGRldmVsb3BlcnMgdG8gYnVpbGQgZ2FtZXMgYW5kIG90aGVyIGFwcGxpY2F0aW9ucyBmb3IgdGhlIHZhcmlvdXMgZGlnaXRhbCBkZXZpY2VzLiBUaGUgdGVsZXZpc2lvbiBwcm9kdWN0cyBmcm9tIEFtYXpvbiBhbmQgb3RoZXJzIGhhdmUgbGFyZ2VseSBzZXJ2ZWQgYXMgYSBzdXBwbGVtZW50IHRvIGV4aXN0aW5nIGNhYmxlLXRlbGV2aXNpb24gc2VydmljZXMgaW5zdGVhZCBvZiByZXBsYWNpbmcgdGhlbS4gVGhlIHNlcnZpY2VzIGRvbuKAmXQgb2ZmZXIgbXVjaCBsaXZlIHByb2dyYW1taW5nIGZvciB0aGluZ3MgbGlrZSBzcG9ydHMgYW5kIGFyZSBtYWlubHkgYW4gZW50cnkgcG9pbnQgZm9yIGFjY2Vzc2luZyBjYXRhbG9ncyBvZiBtb3ZpZXMgYW5kIFRWIHNob3dzIGZvciB2aWV3aW5nIG9uIGRlbWFuZC4gQXBwbGXigJlzIFRWIHByb2R1Y3QgY29zdHMgJDk5LiBXaGlsZSBpdCBwcm92aWRlcyBhY2Nlc3MgdG8gdmlkZW9zIGZyb20gaVR1bmVzLCBIdWx1IExMQywgWW91VHViZSBhbmQgb3RoZXJzLCBBbWF6b24gdmlkZW8gaXNu4oCZdCBhdmFpbGFibGUuIEdvb2dsZeKAmXMgVFYgcHJvZHVjdCwgY2FsbGVkIENocm9tZWNhc3QsIHdhcyBpbnRyb2R1Y2VkIGxhc3QgeWVhciBhbmQgY29zdHMgJDM1LiBPdGhlcnMgY29tcGV0aW5nIGluIHRoZSBtYXJrZXQgaW5jbHVkZSBNaWNyb3NvZnQgQ29ycC4sIHdpdGggaXRzIFhib3ggZ2FtZSBzeXN0ZW0sIGFuZCBSb2t1IEluYy4g4oCcVGhpcyBpcyB0aGVpciBhdHRhY2sgb24gUm9rdSBhbmQgQXBwbGUgVFYs4oCdIHNhaWQgQnJpYW4gQmxhaXIsIGFuIGFuYWx5c3QgYXQgV2VkZ2UgUGFydG5lcnMu</field><field name="date" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUUgzuCAeA==</field><field name="stockHistoryId" class="java.lang.String">rO0ABXQAEDZkMGMwNWRmNTZkNzNhZjU=</field><field name="symbol" class="java.lang.String">rO0ABXQAAlRW</field><field name="historyDate" class="java.util.Date">rO0ABXNyAA5qYXZhLnV0aWwuRGF0ZWhqgQFLWXQZAwAAeHB3CAAAAUUl9TyAeA==</field><field name="open" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEBBMzMzMzMz</field><field name="high" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEBBThR64Ueu</field><field name="low" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEBA1HrhR64U</field><field name="close" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEBBCPXCj1wp</field><field name="adjClose" class="java.lang.Double">rO0ABXNyABBqYXZhLmxhbmcuRG91YmxlgLPCSilr+wQCAAFEAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cEBBCPXCj1wp</field><field name="volume" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAB7TaA==</field><field name="id" class="java.lang.String">rO0ABXQAEDViMDMwYjMwZDBhMGQ2MjY=</field><field name="_version_" class="java.lang.Long">rO0ABXNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAUz4mJguAAAQ==</field></document></documents><date>2015-05-07T12:26:24-0500</date></cacheEntry>